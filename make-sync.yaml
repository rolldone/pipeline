reset_cache: true
sync_collection:
  src: .sync_collections
  files:
    - docker-compose.yaml
    - .env
var:
  auth:
    username: root
    privateKey: .ssh/openssh_nopassword
    host: localhost
    port: "221"
    remotePath: /home/ubuntu/workspaces
  credentials:
    password: secret123
    username: admin
  one:
    two: Hello from variable!
  server:
    host: example.com
    port: "8080"
project_name: Workspaces Digital Ocean
username: root
privateKey: .ssh/openssh_nopassword
password: secret
host: localhost
port: "221"
remotePath: /home/ubuntu/workspaces
devsync:
  size_limit: 5 # in MB, 0 = no limit, default 0 (no limit)
  # os_target: "linux" or "windows" - affects RemoteCommand syntax in direct_access
  os_target: linux
  auth:
    username: root
    privateKey: .ssh/openssh_nopassword
    password: secret
    host: 182.12.22.22
    port: 22
    remotePath: /home/ubuntu/workspaces
  ignores: []
  agent_watchs:
    - artywiz_hotfix/storage/logs/
  manual_transfer:
    - artywiz_broadcast_service/node_modules
    - .ssh
    - artywiz_hotfix_webapp
    - artywiz_hotfix/vendor
    - artywiz_hotfix/.github
  script:
    local:
      on_ready: ""
      on_stop: ""
      commands:
        - npm run build
        - npm run dev
        - npm test
    remote:
      on_ready: ""
      on_stop: ""
      commands:
        - docker-compose ps
        - docker-compose logs -f
        - docker-compose restart
  trigger_permission:
    unlink_folder: false
    unlink: false
    change: true
    add: true
direct_access:
  config_file: ""
  pipeline_dir: "."
  ssh_configs:
    # For Windows targets, use: RemoteCommand: cmd /K cd =remotePath
    # For Linux targets, use: RemoteCommand: cd =remotePath && bash -l
    - Host: workspaces_digital_ocean
      HostName: 45.55.35.150
      IdentityFile: =var.auth.privateKey
      Port: "22"
      RemoteCommand: =var.one.two
      RequestTty: force
      ServerAliveCountMax: "2"
      ServerAliveInterval: "300"
      StrictHostKeyChecking: "no"
      User: ubuntu
    - Host: workspaces_as_root_digital_ocean
      HostName: 45.55.35.150
      IdentityFile: =var.auth.privateKey
      Port: "22"
      ProxyCommand: ssh -v workspaces_digital_ocean -W [%h]:[%p]
      RemoteCommand: cd /home/ubuntu/workspaces && bash -l
      RequestTty: force
      ServerAliveCountMax: "2"
      ServerAliveInterval: "300"
      StrictHostKeyChecking: "no"
      User: root
    - Host: workspace_internal_digital_ocean
      HostName: localhost
      IdentityFile: =var.auth.privateKey
      Port: "221"
      RemoteCommand: cd /home/ubuntu/workspaces && bash -l
      RequestTty: force
      ServerAliveCountMax: "2"
      ServerAliveInterval: "10"
      StrictHostKeyChecking: "no"
      User: root
    - Host: localhost_host
      HostName: localhost
      User: donny
      Port: "22"
      StrictHostKeyChecking: "no"
  executions:
    - name: Test Output
      key: test-output
      pipeline: test_output.yaml
      jobs: [test, cleanup]
      hosts: [localhost_host]
    - name: Test Ping
      key: test-ping
      pipeline: test_ping.yaml
      jobs: [ping-test]
      hosts: [localhost_host]
    - name: Test Fail Action
      key: test-fail
      pipeline: test_fail_action.yaml
      jobs: [test, rollback]
      hosts: [localhost_host]
    - name: Test Drop Action
      key: test-drop
      pipeline: test_drop_action.yaml
      jobs: [test]
      hosts: [localhost_host]
    - name: Test Else Condition
      key: test-else
      pipeline: test_else_condition.yaml
      jobs: [test, else-handler]
      hosts: [localhost_host]
  ssh_commands:
    - access_name: Run devsync2
      command: ngi-sync devsync2
    - access_name: Enter ForwardPort Workspaces Digital Ocean
      command: ssh -v -L 221:localhost:22 workspaces_as_root_digital_ocean
    - access_name: Enter Server Digital Ocean
      command: ssh -v workspace_internal_digital_ocean
    - access_name: Enter Docker Jumper Digital Ocean
      command: ssh -v -o RemoteCommand=none workspace_internal_digital_ocean -t docker exec -it docker_jumper bash
